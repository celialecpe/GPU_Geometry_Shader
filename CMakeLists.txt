cmake_minimum_required(VERSION 3.10)

project(openGL_CPE LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED True)

find_package(OpenGL REQUIRED)
if(NOT ${OPENGL_FOUND})
  message("OpenGL not found")
endif()

find_package(GLEW)
if(NOT ${GLEW_FOUND} OR APPLE)

  message(WARNING "Glew not found, manual compilation of glew added to the project")

  option(glew-cmake_BUILD_SHARED "Build the shared glew library" OFF)
  option(ONLY_LIBS "Do not build executables" ON)

  add_subdirectory(extern/glew)
  include_directories(${CMAKE_SOURCE_DIR}/extern/glew/include)
  set(USED_GLEW_LIBRARY libglew_static)
else()
  include_directories(${GLEW_INCLUDE_DIRS})
  set(USED_GLEW_LIBRARY ${GLEW_LIBRARIES})
endif()

find_package(GLUT)
if(NOT ${GLUT_FOUND})

  message(WARNING "Glut not found, manual compilation of Glut added to the project")

  option(FREEGLUT_BUILD_SHARED_LIBS "Build FreeGLUT shared library." OFF)
  option(FREEGLUT_BUILD_DEMOS "Build FreeGLUT demos." OFF )
  option(FREEGLUT_PRINT_ERRORS "Lib prints errors to stderr" OFF)
  option(FREEGLUT_PRINT_WARNINGS "Lib prints warnings to stderr" OFF)
  option(INSTALL_PDB "Also install .pdb files" OFF)

  add_subdirectory(extern/freeglut)
  include_directories(${CMAKE_SOURCE_DIR}/extern/freeglut/include)
  set(USED_GLUT_LIBRARY freeglut_static)
else()
  include_directories(${GLUT_INCLUDE_DIRS})
  set(USED_GLUT_LIBRARY ${GLUT_LIBRARY})
endif()

include_directories(${CMAKE_SOURCE_DIR}/extern)

file(GLOB source_files "src/*.cpp")
file(GLOB header_files "src/*.h" "src/*.hpp")
file(GLOB shader_files "shaders/*.frag" "shaders/*.vert")

message("Source files")
foreach(line IN LISTS source_files)
  message("${line}")
endforeach()

message("Header files")
foreach(line IN LISTS header_files)
  message("${line}")
endforeach()

message("Shader files")
foreach(line IN LISTS shader_files)
  message("${line}")
endforeach()

if (WIN32)
  set(LINK_FLAGS )
elseif (APPLE)
  set(LINK_FLAGS )
elseif (UNIX)
  set(LINK_FLAGS )
  add_definitions(-g -Wall -Wextra -Wno-comment -Wno-unused-parameter -Wno-unused-function -Wno-unused-variable)
endif ()

add_executable(openGL_CPE ${source_files} ${header_files} ${shader_files})
target_link_libraries(openGL_CPE ${USED_GLEW_LIBRARY} ${USED_GLUT_LIBRARY} ${OPENGL_LIBRARIES} ${LINK_FLAGS})
set_target_properties(openGL_CPE PROPERTIES  VS_DEBUGGER_WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
set_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT openGL_CPE)
